# name: test/sql/json/read_json.test
# description: Read json files straight to columnar data
# group: [json]

require json

statement ok
pragma enable_verification

statement error
SELECT * FROM read_json('data/json/example_n.ndjson')
----
Binder Error: read_json "columns" parameter is required

query II
SELECT * FROM read_json('data/json/example_n.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'})
----
1	O Brother, Where Art Thou?
2	Home for the Holidays
3	The Firm
4	Broadcast News
5	Raising Arizona

# We can also read only one of the columns
query I
SELECT * FROM read_json('data/json/example_n.ndjson', columns={id: 'INTEGER'})
----
1
2
3
4
5

query I
SELECT * FROM read_json('data/json/example_n.ndjson', columns={name: 'VARCHAR'})
----
O Brother, Where Art Thou?
Home for the Holidays
The Firm
Broadcast News
Raising Arizona

# what about a broken JSON file
query II
SELECT * FROM read_ndjson('data/json/unterminated_quotes.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'}, ignore_errors=true)
----
1	O Brother, Where Art Thou?
2	Home for the Holidays
NULL	NULL
4	Broadcast News
5	Raising Arizona

# some of these values don't have "name"
query II
SELECT * FROM read_json('data/json/different_schemas.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'})
----
1	O Brother, Where Art Thou?
2	NULL
3	The Firm
4	NULL
5	Raising Arizona

query II
SELECT * FROM read_ndjson('data/json/different_schemas.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'})
----
1	O Brother, Where Art Thou?
2	NULL
3	The Firm
4	NULL
5	Raising Arizona

# test projection pushdown (unstructured json)
query I
SELECT id FROM read_json('data/json/example_n.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'})
----
1
2
3
4
5

query I
SELECT name FROM read_json('data/json/example_n.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'})
----
O Brother, Where Art Thou?
Home for the Holidays
The Firm
Broadcast News
Raising Arizona

# test projection pushdown (newline-delimited json)
query I
SELECT id FROM read_ndjson('data/json/example_n.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'})
----
1
2
3
4
5

query I
SELECT name FROM read_ndjson('data/json/example_n.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'})
----
O Brother, Where Art Thou?
Home for the Holidays
The Firm
Broadcast News
Raising Arizona

# auto-detect
query II
SELECT * FROM read_json_auto('data/json/example_n.ndjson')
----
1	O Brother, Where Art Thou?
2	Home for the Holidays
3	The Firm
4	Broadcast News
5	Raising Arizona

query II
SELECT * FROM 'data/json/example_n.ndjson'
----
1	O Brother, Where Art Thou?
2	Home for the Holidays
3	The Firm
4	Broadcast News
5	Raising Arizona

# we can detect lists too
query III
SELECT id, typeof(name), unnest(name) FROM 'data/json/with_list.json'
----
1	VARCHAR[]	O
1	VARCHAR[]	Brother,
1	VARCHAR[]	Where
1	VARCHAR[]	Art
1	VARCHAR[]	Thou?
2	VARCHAR[]	Home
2	VARCHAR[]	for
2	VARCHAR[]	the
2	VARCHAR[]	Holidays
3	VARCHAR[]	The
3	VARCHAR[]	Firm
4	VARCHAR[]	Broadcast
4	VARCHAR[]	News
5	VARCHAR[]	Raising
5	VARCHAR[]	Arizona

# with depth 1 we don't bother detecting inside of the list - defaults to JSON
query III
SELECT id, typeof(name), unnest(name) FROM read_json_auto('data/json/with_list.json', maximum_depth=1)
----
1	JSON[]	"O"
1	JSON[]	"Brother,"
1	JSON[]	"Where"
1	JSON[]	"Art"
1	JSON[]	"Thou?"
2	JSON[]	"Home"
2	JSON[]	"for"
2	JSON[]	"the"
2	JSON[]	"Holidays"
3	JSON[]	"The"
3	JSON[]	"Firm"
4	JSON[]	"Broadcast"
4	JSON[]	"News"
5	JSON[]	"Raising"
5	JSON[]	"Arizona"

# with depth 0 we don't bother detecting anything, everything defaults to JSON (even the "id" column in this case)
query II
SELECT typeof(id), typeof(name) FROM read_json_auto('data/json/with_list.json', maximum_depth=0)
----
JSON	JSON
JSON	JSON
JSON	JSON
JSON	JSON
JSON	JSON

# we can detect UUID's
query II
SELECT id, typeof(id) FROM 'data/json/with_uuid.json'
----
bbd05ae7-76e5-4f1a-a31f-247408251fc9	UUID
d5c52052-5f8e-473f-bc8d-176342643ef5	UUID
3b6a6de3-0732-4591-93ed-8df6091eb00d	UUID
ae24e69e-e0bf-4e85-9848-27d35df85b8b	UUID
63928b16-1814-436f-8b30-b3c40cc31d51	UUID

# top-level array of values
query I
select * from read_json('data/json/top_level_array.json', columns={conclusion: 'VARCHAR'}, json_format='array_of_records')
----
cancelled
cancelled

query I
select * from read_json('data/json/top_level_array.json', auto_detect=true, json_format='array_of_records')
----
cancelled
cancelled

# if we try to read it with 'unstructured', we get an error
statement error
select * from read_json('data/json/top_level_array.json', columns={conclusion: 'VARCHAR'}, lines='false')
----
Invalid Input Error: JSON transform error in file "data/json/top_level_array.json", in object 1: Expected OBJECT, but got ARRAY

# if we try to read an ndjson file as if it is an array of values, we get an error
statement error
select * from read_json_auto('data/json/example_n.ndjson', json_format='array_of_records')
----
Invalid Input Error: JSON transform error in file "data/json/example_n.ndjson", in line 1: Expected JSON ARRAY but got OBJECT

# test that we can read a list of longer than STANDARD_VECTOR_SIZE properly
statement ok
copy (select list(to_json({duck: 42})) from range(10000)) to '__TEST_DIR__/my_file.json' (format csv, quote '')

query T
select count(*) from read_json('__TEST_DIR__/my_file.json', columns={duck: 'INTEGER'}, json_format='array_of_records')
----
10000

query T
select sum(duck) = 42*10000 from read_json('__TEST_DIR__/my_file.json', columns={duck: 'INTEGER'}, json_format='array_of_records')
----
true

# read_json_auto also understands array of values
query T
select count(*) from '__TEST_DIR__/my_file.json'
----
10000

query T
select sum(duck) = 42*10000 from '__TEST_DIR__/my_file.json'
----
true

# what if we do an array of non-values?
statement ok
copy (select list(range) from range(10)) to '__TEST_DIR__/my_file.json' (format csv, quote '')

query T
select * from '__TEST_DIR__/my_file.json'
----
0
1
2
3
4
5
6
7
8
9

query T
select * from read_json('__TEST_DIR__/my_file.json', json_format='array_of_values', columns={range: 'INTEGER'})
----
0
1
2
3
4
5
6
7
8
9

# fails because it's not an array of records
statement error
select * from read_json_auto('__TEST_DIR__/my_file.json', json_format='array_of_records')

statement ok
pragma disable_verification

require httpfs

query II
select * from read_json_auto('https://github.com/duckdb/duckdb-data/releases/download/v1.0/example_rn.ndjson');
----
1	O Brother, Where Art Thou?
2	Home for the Holidays
3	The Firm
4	Broadcast News
5	Raising Arizona
